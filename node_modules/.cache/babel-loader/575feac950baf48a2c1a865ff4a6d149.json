{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  todoList: {\n    1: [],\n    2: [],\n    3: [],\n    4: [],\n    5: [],\n    6: [],\n    7: [],\n    8: [],\n    9: [],\n    10: []\n  },\n  selectedUser: 1\n};\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    addTodo: (state, action) => {\n      //state.todoList[state.selectedUser].push(action.payload)\n      state.todoList[state.selectedUser].unshift(action.payload);\n    },\n    setCheck: (state, action) => {\n      state.todoList[state.selectedUser].map(item => {\n        if (action.payload === item.id) {\n          item.completed = !item.completed;\n        }\n      });\n    },\n    setUser: (state, action) => {\n      state.selectedUser = action.payload;\n    },\n    removeTodo: (state, action) => {\n      let list = state.todoList[state.selectedUser];\n\n      for (var i = 0; i < list.length; i++) {\n        if (list[i].id === action.payload) {\n          state.todoList[state.selectedUser].splice(i, 1);\n        }\n      }\n    }\n  }\n});\nexport const {\n  addTodo,\n  setCheck,\n  setUser,\n  removeTodo\n} = todoSlice.actions;\nexport const selectTodoList = state => state.todos.todoList[state.todos.selectedUser];\nexport const selectUser = state => state.todos.selectedUser;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["C:/Users/adria/OneDrive/Documents/GitHub/New_TechnologyConsulting/src/features/todoSlice.js"],"names":["createSlice","initialState","todoList","selectedUser","todoSlice","name","reducers","addTodo","state","action","unshift","payload","setCheck","map","item","id","completed","setUser","removeTodo","list","i","length","splice","actions","selectTodoList","todos","selectUser","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EACJ;AACI,OAAG,EADP;AAEI,OAAG,EAFP;AAGI,OAAG,EAHP;AAII,OAAG,EAJP;AAKI,OAAG,EALP;AAMI,OAAG,EANP;AAOI,OAAG,EAPP;AAQI,OAAG,EARP;AASI,OAAG,EATP;AAUI,QAAI;AAVR,GAFa;AAcjBC,EAAAA,YAAY,EAAE;AAdG,CAArB;AAiBA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC1BK,EAAAA,IAAI,EAAE,OADoB;AAE1BJ,EAAAA,YAF0B;AAG1BK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxB;AACAD,MAAAA,KAAK,CAACN,QAAN,CAAeM,KAAK,CAACL,YAArB,EAAmCO,OAAnC,CAA2CD,MAAM,CAACE,OAAlD;AACH,KAJK;AAKNC,IAAAA,QAAQ,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACzBD,MAAAA,KAAK,CAACN,QAAN,CAAeM,KAAK,CAACL,YAArB,EAAmCU,GAAnC,CAAuCC,IAAI,IAAI;AAC3C,YAAIL,MAAM,CAACE,OAAP,KAAmBG,IAAI,CAACC,EAA5B,EAAgC;AAC5BD,UAAAA,IAAI,CAACE,SAAL,GAAiB,CAACF,IAAI,CAACE,SAAvB;AACH;AACJ,OAJD;AAKH,KAXK;AAYNC,IAAAA,OAAO,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACxBD,MAAAA,KAAK,CAACL,YAAN,GAAqBM,MAAM,CAACE,OAA5B;AACH,KAdK;AAeNO,IAAAA,UAAU,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAC3B,UAAIU,IAAI,GAAGX,KAAK,CAACN,QAAN,CAAeM,KAAK,CAACL,YAArB,CAAX;;AAEA,WAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,YAAID,IAAI,CAACC,CAAD,CAAJ,CAAQL,EAAR,KAAeN,MAAM,CAACE,OAA1B,EAAmC;AAC/BH,UAAAA,KAAK,CAACN,QAAN,CAAeM,KAAK,CAACL,YAArB,EAAmCmB,MAAnC,CAA0CF,CAA1C,EAA6C,CAA7C;AACH;AACJ;AACJ;AAvBK;AAHgB,CAAD,CAA7B;AA8BA,OAAO,MAAM;AAAEb,EAAAA,OAAF;AAAWK,EAAAA,QAAX;AAAqBK,EAAAA,OAArB;AAA8BC,EAAAA;AAA9B,IAA6Cd,SAAS,CAACmB,OAA7D;AAEP,OAAO,MAAMC,cAAc,GAAGhB,KAAK,IAAIA,KAAK,CAACiB,KAAN,CAAYvB,QAAZ,CAAqBM,KAAK,CAACiB,KAAN,CAAYtB,YAAjC,CAAhC;AACP,OAAO,MAAMuB,UAAU,GAAGlB,KAAK,IAAIA,KAAK,CAACiB,KAAN,CAAYtB,YAAxC;AAEP,eAAeC,SAAS,CAACuB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    todoList: \r\n        {\r\n            1: [],\r\n            2: [],\r\n            3: [],\r\n            4: [],\r\n            5: [],\r\n            6: [],\r\n            7: [],\r\n            8: [],\r\n            9: [],\r\n            10: [],\r\n        },\r\n    selectedUser: 1\r\n}\r\n\r\nconst todoSlice = createSlice({\r\n    name: \"todos\",\r\n    initialState,\r\n    reducers: {\r\n        addTodo: (state, action) => {\r\n            //state.todoList[state.selectedUser].push(action.payload)\r\n            state.todoList[state.selectedUser].unshift(action.payload)\r\n        },\r\n        setCheck: (state, action) => {\r\n            state.todoList[state.selectedUser].map(item => {\r\n                if (action.payload === item.id) {\r\n                    item.completed = !item.completed\r\n                }\r\n            })\r\n        },\r\n        setUser: (state, action) => {\r\n            state.selectedUser = action.payload\r\n        },\r\n        removeTodo: (state, action) => {\r\n            let list = state.todoList[state.selectedUser]\r\n\r\n            for (var i = 0; i < list.length; i++) {\r\n                if (list[i].id === action.payload) {\r\n                    state.todoList[state.selectedUser].splice(i, 1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addTodo, setCheck, setUser, removeTodo } = todoSlice.actions\r\n\r\nexport const selectTodoList = state => state.todos.todoList[state.todos.selectedUser]\r\nexport const selectUser = state => state.todos.selectedUser\r\n\r\nexport default todoSlice.reducer"]},"metadata":{},"sourceType":"module"}